# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches:
          "**"

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Java environment
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'  # Use Oracle JDK (or 'temurin' for OpenJDK)
          java-version: '17'  # Use Java 17

      # Step 3: Build the Spring Boot application using Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests  # Skip tests for faster deployment

      # Step 4: Deploy to AWS Elastic Beanstalk
      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_SECRET_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          application_name: ${{ secrets.EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
          version_label: "${{ github.run_number }}"  # Unique version label
          region: us-west-1
          deployment_package: target/ecom-0.0.1-SNAPSHOT.jar
